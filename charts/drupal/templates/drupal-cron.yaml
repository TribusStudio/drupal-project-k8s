{{- range $index, $job := .Values.php.cron }}
apiVersion: {{ include "drupal.cron.api-version" $ | trim }}
kind: CronJob
metadata:
  {{- $indexHash := sha256sum $index | trunc 3 }}
  {{- $nameAppendix := (gt (len $index) 6) | ternary ( print ($index | trunc 3) print $indexHash ) $index}}
  {{- $releaseNameTrimmed := substr 0 (int (sub 46 (len $nameAppendix))) $.Release.Name }}
  name: {{ $releaseNameTrimmed }}-cron-{{ $nameAppendix }}
  labels:
    {{- include "drupal.release_labels" $ | nindent 4 }}
spec:
  schedule: {{ $job.schedule | replace "~" (randNumeric 1) | quote }}
  concurrencyPolicy: Forbid
  startingDeadlineSeconds: 3600
  failedJobsHistoryLimit: 1
  successfulJobsHistoryLimit: 1
  suspend: false
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            {{- include "drupal.release_labels" $ | nindent 12 }}
            cronjob: "true"
        spec:
          enableServiceLinks: false
          containers:
          - name: drupal-cron
            {{- include "drupal.php-container" $ | nindent 12 }}
            volumeMounts:
              {{- include "drupal.volumeMounts" $ | nindent 14 }}
            command: ["/bin/bash", "-c"]
            args:
              - |
                {{- include "cron.entrypoints" $ | nindent 16 }}
                set -x
                if [ {{ include "drupal.installation-in-progress-test" $ }} ]; then
                  # Retry util install finishes
                  exit 1
                fi
                # Disable debugging while setting up things
                { set +x ; } 2>/dev/null
                set +e
                # We need to save the executable command(s) into a file,
                # because 'time' can exeute only command-files,
                # not shell constructs.
                script="/tmp/cron.$$"
                cat << CMD > "${script}"
                #!/bin/bash
                set -x
                {{ $job.command | nindent 16 }}
                CMD
                cmod 755 "${script}"
                stats="/tmp/stats.$$"
                # The execution.
                /usr/bin/time -f '"time_s":%es,"peak_mem_kb":%Mkb' -o "${stats}" "${script}"
                exit_code="$?"
                cron_name="{{ $index }}"
                # if the error code is non-zero, the output file contains a warning.
                stats="$(grep -E '"time_s".*"peak_mem_kb"' ${stats})"
                # Assemble the JSON output.
                cat << JSON
                {"cron_name":"${cron_name}",${stats},"exit_code":${exit_code}}
                JSON
            resources:
              {{ if $job.resources }}
              {{- $job.resources | toYaml | nindent 14 }}
              {{ else }}
              {{- $.Values.php.resources | toYaml | nindent 14 }}
              {{- end }}
          restartPolicy: Never
          nodeSelector:
            {{ if $job.nodeSelector }}
            {{- $job.nodeSelector | toYaml | nindent 12 }}
            {{ else }}
            {{- $.Values.php.nodeSelector | toYaml | nindent 12 }}
            {{- end }}
          tolerations:
            {{ if $job.nodeSelector }}
            {{- include "drupal.tolerations" $job.nodeSelector | nindent 12 }}
            {{ else }}
            {{- include "drupal.tolerations" $.Values.php.nodeSelector | nindent 12 }}
            {{- end }}

          volumes:
            {{- include "drupal.volumes" $ | nindent 12 }}

          {{- include "drupal.imagePullSecrets" $ | nindent 10 }}
---
{{- end }}
